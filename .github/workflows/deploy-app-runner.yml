name: Deploy to AWS App Runner

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION:                   ${{ secrets.AWS_REGION }}
      AWS_ASSUME_ROLE_ARN:          ${{ secrets.AWS_ASSUME_ROLE_ARN }}
      APP_RUNNER_SERVICE_ARN:       ${{ secrets.APP_RUNNER_SERVICE_ARN }}
      ANTHROPIC_API_KEY:            ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY:               ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY:               ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_SEARCH_ENGINE_ID:      ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      DOCDB_URI:                    ${{ secrets.DOCDB_URI }}
      JWT_SECRET_KEY:               ${{ secrets.JWT_SECRET_KEY }}
      NODE_ENV:                     ${{ secrets.NODE_ENV }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download RDS global truststore
        run: |
          wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem \
               -O ./global-bundle.pem

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Write health-check.json
        run: |
          cat > health-check.json <<EOF
          {
            "Protocol": "HTTP",
            "Path": "/health",
            "Interval": 10,
            "Timeout": 5,
            "HealthyThreshold": 1,
            "UnhealthyThreshold": 10
          }
          EOF

      - name: Write env-vars.json
        run: |
          cat > env-vars.json <<EOF
          [
            { "Name": "ANTHROPIC_API_KEY",       "Value": "${{ env.ANTHROPIC_API_KEY }}" },
            { "Name": "OPENAI_API_KEY",          "Value": "${{ env.OPENAI_API_KEY }}" },
            { "Name": "GOOGLE_API_KEY",          "Value": "${{ env.GOOGLE_API_KEY }}" },
            { "Name": "GOOGLE_SEARCH_ENGINE_ID", "Value": "${{ env.GOOGLE_SEARCH_ENGINE_ID }}" },
            { "Name": "DOCDB_URI",               "Value": "${{ env.DOCDB_URI }}" },
            { "Name": "JWT_SECRET_KEY",          "Value": "${{ env.JWT_SECRET_KEY }}" },
            { "Name": "NODE_ENV",                "Value": "${{ env.NODE_ENV }}" }
          ]
          EOF

      - name: Wait for any in-progress operation to finish
        run: |
          echo "Waiting for App Runner to be idle..."
          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service \
              --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.OperationSummary.Status' --output text)
            echo "Operation status: $STATUS"
            if [[ "$STATUS" != "IN_PROGRESS" ]]; then
              echo "Service is idle."
              break
            fi
            sleep 10
          done

      - name: Switch to Repository mode & Update Health Check + Env-vars
        run: |
          aws apprunner update-service \
            --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
            --source-configuration file://<(cat <<EOF
          {
            "CodeRepository": {
              "RepositoryUrl":     "https://github.com/${{ github.repository }}",
              "SourceCodeVersion": {"Type":"BRANCH","Value":"main"},
              "CodeConfiguration": {"ConfigurationSource":"REPOSITORY"}
            }
          }
          EOF
            ) \
            --health-check-configuration file://health-check.json \
            --environment-variables file://env-vars.json \
            --region ${{ env.AWS_REGION }}

      - name: Wait for App Runner service to be RUNNING
        run: |
          echo "Waiting for App Runner service to reach RUNNING status..."
          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service \
              --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.Status' --output text)
            echo "Status: $STATUS"
            if [[ "$STATUS" == "RUNNING" ]]; then
              echo "Service is RUNNING."
              break
            fi
            if [[ "$STATUS" == "FAILED" ]]; then
              echo "Deployment failed."
              exit 1
            fi
            sleep 10
          done

      - name: Get App Runner URL
        id: get-url
        run: |
          URL=$(aws apprunner describe-service \
            --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
            --query 'Service.ServiceUrl' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "service-url=$URL" >> $GITHUB_ENV

      - name: Deployment complete
        run: echo "âœ… App Runner URL ${{ env.service-url }}"
