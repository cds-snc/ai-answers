name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main

permissions:
  contents: read    # allow checkout
  id-token: write   # allow OIDC for AWS creds

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION:                   ${{ secrets.AWS_REGION }}
      AWS_ASSUME_ROLE_ARN:          ${{ secrets.AWS_ASSUME_ROLE_ARN }}
      APP_RUNNER_SERVICE_ARN:       ${{ secrets.APP_RUNNER_SERVICE_ARN }}
      ANTHROPIC_API_KEY:            ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY:               ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY:               ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_SEARCH_ENGINE_ID:      ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      DOCDB_URI:                    ${{ secrets.DOCDB_URI }}
      JWT_SECRET_KEY:               ${{ secrets.JWT_SECRET_KEY }}
      NODE_ENV:                     ${{ secrets.NODE_ENV }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download RDS global truststore
        run: |
          wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem \
               -O ./global-bundle.pem

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Write update-input.json
        run: |
          cat > update-input.json <<EOF
          {
            "ServiceArn": "${{ env.APP_RUNNER_SERVICE_ARN }}",
            "SourceConfiguration": {
              "CodeRepository": {
                "RepositoryUrl": "https://github.com/${{ github.repository }}",
                "SourceCodeVersion": { "Type": "BRANCH", "Value": "main" },
                "CodeConfiguration": {
                  "ConfigurationSource": "API",
                  "CodeConfigurationValues": {
                    "Runtime": "NODEJS_18",
                    "BuildCommand": "npm install && npm run build",
                    "StartCommand": "npm start",
                    "RuntimeEnvironmentVariables": {
                      "ANTHROPIC_API_KEY":       "${{ env.ANTHROPIC_API_KEY }}",
                      "OPENAI_API_KEY":          "${{ env.OPENAI_API_KEY }}",
                      "GOOGLE_API_KEY":          "${{ env.GOOGLE_API_KEY }}",
                      "GOOGLE_SEARCH_ENGINE_ID": "${{ env.GOOGLE_SEARCH_ENGINE_ID }}",
                      "DOCDB_URI":               "${{ env.DOCDB_URI }}",
                      "JWT_SECRET_KEY":          "${{ env.JWT_SECRET_KEY }}",
                      "NODE_ENV":                "${{ env.NODE_ENV }}"
                    }
                  }
                }
              }
            },
            "InstanceConfiguration": {
              "Cpu": "1024",
              "Memory": "2048"
            },
            "HealthCheckConfiguration": {
              "Protocol": "HTTP",
              "Path": "/health",
              "Interval": 10,
              "Timeout": 5,
              "HealthyThreshold": 1,
              "UnhealthyThreshold": 10
            }
          }
          EOF

      - name: Wait for any in-progress operation to finish
        run: |
          echo "Waiting for App Runner to be idle..."
          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service \
              --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.OperationSummary.Status' --output text)
            echo "Operation status: $STATUS"
            [[ "$STATUS" != "IN_PROGRESS" ]] && break
            sleep 5
          done

      - name: Update App Runner via JSON
        run: |
          aws apprunner update-service \
            --cli-input-json file://update-input.json \
            --region ${{ env.AWS_REGION }}

      - name: Wait for service to be RUNNING
        run: |
          echo "Waiting for App Runner service to reach RUNNING status..."
          for i in {1..30}; do
            S=$(aws apprunner describe-service \
              --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.Status' --output text)
            echo "Status: $S"
            [[ "$S" == "RUNNING" ]] && break
            [[ "$S" == "FAILED" ]] && exit 1
            sleep 10
          done

      - name: Get App Runner URL
        run: |
          URL=$(aws apprunner describe-service \
            --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
            --region ${{ env.AWS_REGION }} \
            --query 'Service.ServiceUrl' --output text)
          echo "âœ… App Runner URL: $URL"
