name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION:                ${{ secrets.AWS_REGION }}
      AWS_ASSUME_ROLE_ARN:       ${{ secrets.AWS_ASSUME_ROLE_ARN }}
      APP_RUNNER_SERVICE_ARN:    ${{ secrets.APP_RUNNER_SERVICE_ARN }}
      APP_RUNNER_CONNECTION_ARN: ${{ secrets.APP_RUNNER_CONNECTION_ARN }}
      ANTHROPIC_API_KEY:         ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY:            ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY:            ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_SEARCH_ENGINE_ID:   ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      DOCDB_URI:                 ${{ secrets.DOCDB_URI }}
      JWT_SECRET_KEY:            ${{ secrets.JWT_SECRET_KEY }}
      NODE_ENV:                  ${{ secrets.NODE_ENV }}

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Write update-input.json
        run: |
          cat > update-input.json <<-EOF
          {
            "ServiceArn": "${{ env.APP_RUNNER_SERVICE_ARN }}",
            "SourceConfiguration": {
              "CodeRepository": {
                "RepositoryUrl": "https://github.com/${{ github.repository }}",
                "SourceCodeVersion": {
                  "Type": "COMMIT",
                  "Value": "${{ github.sha }}"
                },
                "CodeConfiguration": {
                  "ConfigurationSource": "API",
                  "CodeConfigurationValues": {
                    "Runtime": "NODEJS_22",
                    "BuildCommand": "npm install && npm run build",
                    "StartCommand": "npm run start-server",
                    "RuntimeEnvironmentVariables": {
                      "ANTHROPIC_API_KEY":       "${{ env.ANTHROPIC_API_KEY }}",
                      "OPENAI_API_KEY":          "${{ env.OPENAI_API_KEY }}",
                      "GOOGLE_API_KEY":          "${{ env.GOOGLE_API_KEY }}",
                      "GOOGLE_SEARCH_ENGINE_ID": "${{ env.GOOGLE_SEARCH_ENGINE_ID }}",
                      "DOCDB_URI":               "${{ env.DOCDB_URI }}",
                      "JWT_SECRET_KEY":          "${{ env.JWT_SECRET_KEY }}",
                      "NODE_ENV":                "${{ env.NODE_ENV }}"
                    }
                  }
                }
              }
            },
            "InstanceConfiguration": {
              "Cpu": "1024",
              "Memory": "2048"
            },
            "HealthCheckConfiguration": {
              "Protocol": "HTTP",
              "Path": "/health",
              "Interval": 20,
              "Timeout": 15,
              "HealthyThreshold": 1,
              "UnhealthyThreshold": 10
            }
          }
          EOF

      - name: Wait up to 4h for idle
        run: |
          echo "Waiting up to 4h for App Runner to be idle..."
          for i in {1..240}; do
            STATUS=$(aws apprunner describe-service \
              --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.OperationSummary.Status' --output text)
            echo "  [$i] Operation status: $STATUS"
            [[ "$STATUS" != "IN_PROGRESS" ]] && { echo "Idle detected."; break; }
            sleep 60
          done

      - name: Attempt update with retries (up to ~10m)
        run: |
          set -e
          for attempt in {1..10}; do
            echo "Update attempt #$attempt..."
            if aws apprunner update-service \
                --cli-input-json file://update-input.json \
                --region ${{ env.AWS_REGION }}; then
              echo "Update succeeded"; break
            else
              echo "Update blocked, retrying in 60s..."
              sleep 60
            fi
          done

      - name: Wait up to 4h for RUNNING
        run: |
          echo "Waiting up to 4h for service RUNNING..."
          for i in {1..240}; do
            STATE=$(aws apprunner describe-service \
              --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.Status' --output text)
            echo "  [$i] State: $STATE"
            [[ "$STATE" == "RUNNING" ]] && { echo "Service is RUNNING."; exit 0; }
            [[ "$STATE" == "FAILED
