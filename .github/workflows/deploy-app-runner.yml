name: Deploy to AWS App Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  deployments: write  # needed for create/update Deployment API calls :contentReference[oaicite:3]{index=3}

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION:              ${{ secrets.AWS_REGION }}
      AWS_ASSUME_ROLE_ARN:     ${{ secrets.AWS_ASSUME_ROLE_ARN }}
      APP_RUNNER_SERVICE_ARN:  ${{ secrets.APP_RUNNER_SERVICE_ARN }}
      ANTHROPIC_API_KEY:       ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY:          ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY:          ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_SEARCH_ENGINE_ID: ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      DOCDB_URI:               ${{ secrets.DOCDB_URI }}
      JWT_SECRET_KEY:          ${{ secrets.JWT_SECRET_KEY }}
      NODE_ENV:                ${{ secrets.NODE_ENV }}

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Create GitHub Deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token:            ${{ secrets.GITHUB_TOKEN }}
          environment:      experimentation
          # no need to supply environment-url yet :contentReference[oaicite:4]{index=4}

      - name: Mark deployment as “in_progress”
        uses: chrnorm/deployment-status@v2
        with:
          token:         ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state:         in_progress  # shows “running” :contentReference[oaicite:5]{index=5}

      - name: Write update-input.json
        run: |
          cat > update-input.json <<-EOF
          {
            "ServiceArn": "${{ env.APP_RUNNER_SERVICE_ARN }}",
            "SourceConfiguration": { ... }
          }
          EOF

      - name: Wait up to 4h for idle
        run: |
          # (your existing “idle” loop here)

      - name: Update service (retries)
        run: |
          # (your existing update-service loop here)

      - name: Wait up to 4h for RUNNING (force if idle)
        run: |
          # (your existing force-deploy loop here)

      - name: Fetch App Runner URL
        id: get-url
        run: |
          URL=$(aws apprunner describe-service \
            --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
            --region ${{ env.AWS_REGION }} \
            --query 'Service.ServiceUrl' --output text)
          echo "::set-output name=url::$URL"

      - name: Mark deployment as “success”
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token:          ${{ secrets.GITHUB_TOKEN }}
          deployment-id:  ${{ steps.deployment.outputs.deployment_id }}
          state:          success       # shows “published” :contentReference[oaicite:6]{index=6}
          environment-url: ${{ steps.get-url.outputs.url }}

      - name: Mark deployment as “failure”
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token:          ${{ secrets.GITHUB_TOKEN }}
          deployment-id:  ${{ steps.deployment.outputs.deployment_id }}
          state:          failure
