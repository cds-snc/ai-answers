name: Deploy to AWS App Runner

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION:                   ${{ secrets.AWS_REGION }}
      AWS_ASSUME_ROLE_ARN:          ${{ secrets.AWS_ASSUME_ROLE_ARN }}
      APP_RUNNER_SERVICE_ARN:       ${{ secrets.APP_RUNNER_SERVICE_ARN }}
      ANTHROPIC_API_KEY:            ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY:               ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY:               ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_SEARCH_ENGINE_ID:      ${{ secrets.GOOGLE_SEARCH_ENGINE_ID }}
      DOCDB_URI:                    ${{ secrets.DOCDB_URI }}
      JWT_SECRET_KEY:               ${{ secrets.JWT_SECRET_KEY }}
      NODE_ENV:                     ${{ secrets.NODE_ENV }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      - name: Write source-config.json
        run: |
          cat > source-config.json <<-EOF
          {
            "CodeRepository": {
              "RepositoryUrl": "https://github.com/${{ github.repository }}",
              "SourceCodeVersion": { "Type": "BRANCH", "Value": "main" },
              "CodeConfiguration": { "ConfigurationSource": "REPOSITORY" }
            }
          }
          EOF

      - name: Write health-check.json
        run: |
          cat > health-check.json <<-EOF
          {
            "Protocol": "HTTP",
            "Path": "/health",
            "Interval": 10,
            "Timeout": 5,
            "HealthyThreshold": 1,
            "UnhealthyThreshold": 10
          }
          EOF

      - name: Write instance-config.json
        run: |
          cat > instance-config.json <<-EOF
          {
            "Cpu": "1024",
            "Memory": "2048",
            "EnvironmentVariables": [
              { "Name": "ANTHROPIC_API_KEY",       "Value": "${{ env.ANTHROPIC_API_KEY }}" },
              { "Name": "OPENAI_API_KEY",          "Value": "${{ env.OPENAI_API_KEY }}" },
              { "Name": "GOOGLE_API_KEY",          "Value": "${{ env.GOOGLE_API_KEY }}" },
              { "Name": "GOOGLE_SEARCH_ENGINE_ID", "Value": "${{ env.GOOGLE_SEARCH_ENGINE_ID }}" },
              { "Name": "DOCDB_URI",               "Value": "${{ env.DOCDB_URI }}" },
              { "Name": "JWT_SECRET_KEY",          "Value": "${{ env.JWT_SECRET_KEY }}" },
              { "Name": "NODE_ENV",                "Value": "${{ env.NODE_ENV }}" }
            ]
          }
          EOF

      - name: Wait for any existing operation to finish
        run: |
          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service \
              --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.OperationSummary.Status' --output text)
            echo "Current operation: $STATUS"
            [[ "$STATUS" != "IN_PROGRESS" ]] && break
            sleep 5
          done

      - name: Update App Runner service
        run: |
          aws apprunner update-service \
            --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
            --source-configuration file://source-config.json \
            --instance-configuration file://instance-config.json \
            --health-check-configuration file://health-check.json \
            --region ${{ env.AWS_REGION }}

      - name: Wait for RUNNING status
        run: |
          echo "Waiting for service to reach RUNNING…"
          for i in {1..30}; do
            S=$(aws apprunner describe-service \
              --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.Status' --output text)
            echo "  Status: $S"
            [[ "$S" == "RUNNING" ]] && exit 0
            [[ "$S" == "FAILED" ]] && exit 1
            sleep 10
          done
          echo "Timed out waiting for RUNNING." && exit 1

      - name: Get and echo App Runner URL
        run: |
          URL=$(aws apprunner describe-service \
            --service-arn "${{ env.APP_RUNNER_SERVICE_ARN }}" \
            --region ${{ env.AWS_REGION }} \
            --query 'Service.ServiceUrl' --output text)
          echo "✅ App Runner URL: $URL"
